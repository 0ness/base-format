//　MIXIN　モジュール用SCSS
//　共有用モジュールのみ記述　基本プロジェクトに影響するものは記述しない

//　メディアクエリ
//　CSS3
//　レイアウト
//　IE対応 etc



// MIXIN メディアクエリ系モジュール ///////////////////////////////////////

//最小エリア　メディアクエリ
@mixin min-height-media() {
	@media screen and (max-height:700px) {
		@content;
	}
}

//レスポンシブ対応　PC用メディアクエリ
@mixin pc-media-query{
	@media screen and (min-width:769px){
		@content;
	}
}

//レスポンシブ対応　SP用メディアクエリ
@mixin sp-media-query{
	@media screen and (max-width:768px){
		@content;
	}
}

//iphone用メディアクエリ
@mixin iphone {
	@media screen and (min-width: 0px) and (max-device-width: 640px){
		@content;
	}
}

//ipad用メディアクエリ
@mixin ipad {
	@media only screen and
		(min-device-width : 768px) and
		(max-device-width : 1024px){
			@content;
		}
}

//Androidの高精細画面も含めた指定
@mixin mobile {
	@media only screen and (-webkit-min-device-pixel-ratio: 1.5) {	@content; }
}

//iPhone4 〜 iPhone6
@mixin iphone456 {
	@media screen and (min-width: 320px) and (max-width: 413px){
		@content;
	}
}

//iPhone6 Plus ~ ちょっと大きいスマホまで
@mixin iphone6_plus {
	@media screen and (min-width: 414px) and (max-width: 499px){ @content; }
}

//iPHone4,iPhone5,iPhone5s,iPhone6,iPhone6 Plus
@mixin iphone456s {
	@media screen and (min-width: 0px) and (max-width: 499px){ @content; }
}




// MIXIN ブラウザ分岐系モジュール ///////////////////////////////////////

//IE6用対応
@mixin ie6	{
	html.ie6 &{ @content; }
}

//IE7用対応
@mixin ie7	{
	html.ie7 &{ @content; }
}

//IE8用対応
@mixin ie8	{
	html.ie8 &{ @content; }
}

//IE8用対応
@mixin ie9	{
	html.ie9 &{ @content; }
}

//Firefox用対応
@mixin firefox	{
	#wrapper.firefox &{ @content; }
}

//webkit用対応
@mixin webkit	{
	#wrapper.webkit &{ @content; }
}

//IE7、8用対応
@mixin ie78	{
	html.ie7 &{ @content; }
	html.ie8 &{ @content; }
}

//IE6、7、8用対応
@mixin ie678	{
	html.ie6 &{ @content; }
	html.ie7 &{ @content; }
	html.ie8 &{ @content; }
}

//IE6、7、8、9用対応
@mixin ie6789	{
	html.ie6 &{ @content; }
	html.ie7 &{ @content; }
	html.ie8 &{ @content; }
	html.ie9 &{ @content; }
}

//IE7、8用対応
@mixin ie78	{
	html.ie7 &{ @content; }
	html.ie8 &{ @content; }
}

//IE8、9用対応
@mixin ie89	{
	html.ie8 &{ @content; }
	html.ie9 &{ @content; }
}

//IE7、8、9用対応
@mixin ie789	{
	html.ie7 &{ @content; }
	html.ie8 &{ @content; }
	html.ie9 &{ @content; }
}

//IE6用　ハック対応
@mixin hack_ie6	{
	* html &{ @content;}
}	

//IE7用　ハック対応
@mixin hack_ie7	{
	*+html &{ @content;}
}	

//IE6、7用　ハック対応
@mixin hack_ie67	{
	* html &{ @content;}
	*+html &{ @content;}
}



// MIXIN CSS3系モジュール ///////////////////////////////////////

//透明度を指定する（アルファ値をパーセンテージで入力）
//zoom:1;を対IE用に追加
//@mixin opacity
//@param {Number} $n - 透明度指定：0〜100
@mixin opacity($n:75)	{ opacity:$n/100; filter: alpha(opacity=$n); -ms-filter:"alpha(opacity="+$n+")"; zoom:1;}

//選択範囲テキスト（文字色、背景色）
@mixin select-color($color,$bg){
p::selection,h1::selection,h2::selection,h3::selection,h4::selection,a::selection,img::selection,em::selection,strong::selection,dd::selection,dt::selection,u::selection,dfn::selection,li::selection{ color:$color; background:$bg;}
	*::-moz-selection { color:$color; background:$bg; }
}

//ボックスで円を描く（サイズ、背景色）
@mixin circle($size:100px,$bgcolor:#333) {

	//幅の指定
	@if unitless($size) == true{
		width: $size+px; height: $size+px;
	}@else if unit($size) == "px"{
		width: $size; height: $size;
	}@else if unit($size) == "%"{
		width: $size; height: $size;
	}

	@include radius(100%); background:$bgcolor;
}

//ボックスで楕円を描く（幅、高さ、背景色,ぼかし）
@mixin ellipse($w:100px,$h:100px,$bgcolor:#333,$blur:false) {

	$w_02:$w;
	$h_02:$h;

	//幅の指定
	@if unitless($w) == true{
		$w_02:$w+px;
	}

	//高さの指定
	@if unitless($h) == true{
		$h_02:$h+px;
	}

	//ぼかし
	@if $blur == true{
		@include box-shadow(0 20px 20px $bgcolor,0 -20px 20px $bgcolor,-20px 0 20px $bgcolor,20px 0 20px $bgcolor);
		border:1px solid $bgcolor;
	}

	width:$w_02;
	height:$h_02;
	@include radius(100%); background:$bgcolor;
}

//フォームのスタイル変更
@mixin appearance($prop:none) { -webkit-appearance:$prop; -moz-appearance:$prop; appearance:$prop;}

//画像や文字を選択させない処理
@mixin use-none { user-select: none;-moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;}

//font-smoothingを追加する
@mixin smoothing { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;}

//font-smoothingを解除する
@mixin not-smoothing { -webkit-font-smoothing: subpixel-antialiased; -moz-osx-font-smoothing: unset;}




// MIXIN CSS2系スタイルモジュール ///////////////////////////////////////

//幅指定時に画面の天地左右中央に配置する
//@mixin center
@mixin center{
	position: absolute; top:0; left: 0; bottom: 0; right: 0; margin: auto;
}

//幅と高さ指定（width,height,overflow）
//幅と高さの引数はpx・%で入力、pxは省略可能
//display:blockとoverflowプロパティがセットになる
//@mixin wh
//@param {Number} $w - width値：初期値auto
//@param {Number} $h - height値：初期値auto
//@usage
//.class {
//	=wh(500,500,hidden);
//}
@mixin wh($w:auto,$h:auto,$of:visible){
	$w_02:$w;
	$h_02:$h;

	//幅の指定
	@if $w == auto{
		$w_02:auto;
	}@else if unitless($w) == true{
		$w_02:$w+px;
	}

	//高さの指定
	@if $h == auto{
		$h_02:auto;
	}@else if unitless($h) == true{
		$h_02:$h+px;
	}

	width:$w_02;
	height:$h_02;
	display:block;
}

//絶対配置　上左（top,left,z-index,absolute or fixed）
//@mixin top-left
//@param {Number} $t - top値：初期値0，px値・%値で指定
//@param {Number} $l - left値：初期値0，px値・%値で指定
//@param {Number} $z - z-index値：初期値auto
//@param {String} $pos - positionプロパティ：初期値absolute
//@usage//z-index:100でfixed指定
//.class {
//	=top-left(0,0,100,fixed);
//}
@mixin top-left($t:0,$l:0,$z:auto,$pos:absolute)	{

	//topの指定
	@if unitless($t) == true{
		top:$t+px;
	}@else if unit($t) == "px"{
		top:$t;
	}@else if unit($t) == "%"{
		top:$t;
	}

	//leftの指定
	@if unitless($l) == true{
		left:$l+px;
	}@else if unit($l) == "px"{
		left:$l;
	}@else if unit($l) == "%"{
		left:$l;
	}

	position:$pos;
	z-index:$z;
}

//絶対配置　下左（top,left,z-index,absolute or fixed）
//@mixin bottom-left
//@param {Number} $t - bottom値：初期値0，px値・%値で指定
//@param {Number} $l - left値：初期値0，px値・%値で指定
//@param {Number} $z - z-index値：初期値auto
//@param {String} $pos - positionプロパティ：初期値absolute
@mixin bottom-left($t:0,$l:0,$z:auto,$pos:absolute){

	//bottomの指定
	@if unitless($t) == true{
		bottom:$t+px;
	}@else if unit($t) == "px"{
		bottom:$t;
	}@else if unit($t) == "%"{
		bottom:$t;
	}

	//leftの指定
	@if unitless($l) == true{
		left:$l+px;
	}@else if unit($l) == "px"{
		left:$l;
	}@else if unit($l) == "%"{
		left:$l;
	}

	position:$pos;
	z-index:$z;		
}

//絶対配置　上右（top,left,z-index,absolute or fixed）
//@mixin top-right
//@param {Number} $t - top値：初期値0，px値・%値で指定
//@param {Number} $l - right値：初期値0，px値・%値で指定
//@param {Number} $z - z-index値：初期値auto
//@param {String} $pos - positionプロパティ：初期値absolute
@mixin top-right($t:0,$l:0,$z:auto,$pos:absolute)	{

	//topの指定
	@if unitless($t) == true{
		top:$t+px;
	}@else if unit($t) == "px"{
		top:$t;
	}@else if unit($t) == "%"{
		top:$t;
	}

	//rightの指定
	@if unitless($l) == true{
		right:$l+px;
	}@else if unit($l) == "px"{
		right:$l;
	}@else if unit($l) == "%"{
		right:$l;
	}

	position:$pos;
	z-index:$z;		
}

//絶対配置　下右（top,left,z-index,absolute or fixed）
//@mixin bottom-right
//@param {Number} $t - bottom値：初期値0，px値・%値で指定
//@param {Number} $l - right値：初期値0，px値・%値で指定
//@param {Number} $z - z-index値：初期値auto
//@param {String} $pos - positionプロパティ：初期値absolute
@mixin bottom-right($t:0,$l:0,$z:auto,$pos:absolute)	{

	//bottomの指定
	@if unitless($t) == true{
		bottom:$t+px;
	}@else if unit($t) == "px"{
		bottom:$t;
	}@else if unit($t) == "%"{
		bottom:$t;
	}

	//rightの指定
	@if unitless($l) == true{
		right:$l+px;
	}@else if unit($l) == "px"{
		right:$l;
	}@else if unit($l) == "%"{
		right:$l;
	}

	position:$pos;
	z-index:$z;		
}

//絶対配置のマスク配置（マスクの色,z-index）
@mixin mask($color:none,$z:auto)	{ width:100%; height:100%; display:block; position:absolute; top:0; left:0; z-index:$z; background:$color;}		

//指定した要素をクリアフィックスさせる
//@mixin clearfix
@mixin clearfix {
	zoom: 1;
	&:before,
	&:after {
		display: block;
		height: 0;
		visibility: hidden;
		content: "\0020";
	}
	&:after { clear: both;}
}

//指定した要素内のテキストを両端揃え
//テキスト群を整頓したい場合に使用する
//@mixin text-justify
@mixin text-justify	{
	text-align:justify;
	text-justify:inter-ideograph; 
}

//フォントサイズをpx指定でrem化する
//IE6〜8用にpx指定もセットで行う
//@mixin fr
//@param {Number} $px - 指定したいpxでのサイズ
//@source http://c-brains.jp/blog/wsg/14/10/06-191029.php
@mixin fr($px:13) {
	//	@if $px < 10 {
	//		$per:$px / 10;
	//		$px:10;
	//		transform:scale($per);
	//	}
	$rem:$px / 10;
	font-size: $px + px;
	font-size: $rem + rem;
}

//フォントサイズをpx指定でrem化する
//IE6〜8用にpx指定もセットで行う
//@mixin fr
//@param {Number} $px - 指定したいpxでのサイズ
//@source http://c-brains.jp/blog/wsg/14/10/06-191029.php
@mixin ico-fr($px:13) {
	@if $px < 10 {
		$per:$px / 10;
		$px:10;
		transform:scale($per);
	}
	font-size: $px + px;
}




// MIXIN レスポンシブ対応モジュール ///////////////////////////////////////

//要素単体をフルードさせる為に使用する
//@mixin fluidElm
//@param {Number} $width - 可変させる要素のwidthのパーセンテージ：初期値100%
//@usage//100%のフルード
// .class{
//	=fluidElm;
// }
////50%のフルード
// .class{
//	=fluidElm(50);
// }
@mixin fluidElm($width:100%){
	@if unit($width) == "%" { width:$width;}
	@else { width:percentage($width/100);}
	height: auto;
	display: block;
	box-sizing: border-box;
};

//要素単体をフルードさせる為に使用する
//親との相対値で値を指定する
//@mixin fluidElmRe
//@param {Number} $elmW - 可変させる要素のwidth
//@praam {Number} $contW - 格納している要素のwidth
//@usage//divが640px、pが200pxの場合の計算
// .class{
//	=fluidElmRe(200,640);
// }
@mixin fluidElmRe($elmW,$contW){
	width:percentage($elmW/$contW);
	height: auto;
	display: block;
	box-sizing: border-box;
};

//ネストする要素をフルードさせる為に使用する
//引数に要素名を入力してセレクタを特定する
//@mixin fluidBlc
//@param {Number} $devide - 格納する画像の数：初期値2
//@param {String} $elm - 可変させる要素セレクタ：初期値"img"
//@param {Number} $margin - 画像間のmarginの割合パーセンテージ（全体の合計値）：初期値0
//@param {Number} $width - 可変させる要素のwidthのパーセンテージ：初期値100%
//@usage//４分割
// .class{
//	=fluidBlc(4);
// }
//@usage//div.child要素を4分割
// .class{
//	=fluidBlc(4,"div.child",3%);
// }
@mixin fluidBlc($devide:2,$elm:"img",$margin:0,$width:100%){

	//幅の単位の操作　→　要素のレイアウト指定
	@if unit($width) == "%" { width:$width; $width:$width/1%;}
	@else { width:percentage($width / 100); $width:$width;}
	overflow: hidden;
	box-sizing: border-box;

	$imgWidth:(100 - $margin) /$devide / 100;

	//余白が指定された場合
	@if $margin > 0 {
		$margin:$margin / ($devide - 1) / 100;
	}

	//子要素のスタイル指定
	#{$elm} { width:percentage($imgWidth); height: auto; float: left; display: block; box-sizing: border-box;
		@if $margin > 0 {
			margin-right:percentage($margin);
			&:last-child { margin-right: 0;}
		}
	}
}




// MIXIN IE対応レイアウトモジュール ///////////////////////////////////////

//liタグの画像を使ったナビのバグを修正する
@mixin listBugFix	{
	line-height:normal; vertical-align:bottom; font-size:1%;
	a	{ line-height:normal; vertical-align:bottom; font-size:1%;}
	img	{ line-height:normal; vertical-align:bottom; font-size:1%;}
}



